module controller(
	output reg PCSrc,
	output reg RegWrite,
	output reg ALUSrc,
	output reg MemWrite,
	output reg MemtoReg,
	output reg [3:0] ALUControl,
	output reg [1:0] ImmSrc,
	output reg [1:0] RegSrc,
	input [3:0] ALUFlags,
	input [3:0] Cond,
	input [5:0] Funct,
	input [1:0] Op,
	input [3:0] Rd
);

reg condition;

always @(*) begin
	// check condition first
	case (Cond)
		// EQ
		4'b0000: begin
			if (ALUFlags[3])
				condition = 1;
			else
				condition = 0;
		end
		
		// NE
		4'b0001: begin
			if (!ALUFlags[3])
				condition = 1;
			else
				condition = 0;
		end
		
		// AL
		4'b1110: begin
			condition = 1;
		end
	endcase

	if (!condition) begin
		MemWrite = 0;
		RegWrite = 0;
		PCSrc = 0;
	end else begin
		// arrange control signals based on current instruction (if condition is met)
		case (Op)
			// DP
			2'b00: begin
				PCSrc = 0;
				RegSrc = 2'b00;
				MemtoReg = 0;
				RegWrite = 1;
				MemWrite = 0;
				ALUSrc = 0;
				case (Funct[4:1])
					// ADD
					4'b0000: begin
						ALUControl = 4'b0100;
					end
					
					// SUB
					4'b0001: begin		
						ALUControl = 4'b0010;
					end

					// AND
					4'b0010: begin
						ALUControl = 4'b0000;
					end
					
					// ORR
					4'b0011: begin
						ALUControl = 4'b1100;
					end
					
					// MOV
					4'b0100: begin
						ALUControl = 4'b1101;
					end
					
					// CMP
					4'b0101: begin
						// TODO:
					end
				endcase
			end
			
			// MEM
			2'b01: begin
				PCSrc = 0;
				ALUControl = 4'b0100;
				ALUSrc = 1;
				RegSrc = 2'b10;
				ImmSrc = 2'b01;  // second bit needs to be 1
				if (Funct[0] == 0) begin  // STORE
					MemWrite = 1;
					RegWrite = 0;
				end else begin  // LOAD
					MemWrite = 0;
					RegWrite = 1;
					MemtoReg = 1;
				end
			end
			
			// BRANCH
			2'b10: begin
				PCSrc = 1;
				MemtoReg = 0;
				MemWrite = 0;
				ALUControl = 4'b0100;
				ALUSrc = 1;
				ImmSrc = 2'b10;
				RegWrite = 0;
				RegSrc = 2'b01;
			end
		endcase
	end
end

endmodule
