import cocotb
from cocotb.triggers import Timer

async def clock_pulse(dut):
    dut.clk.value = 0
    await Timer(5, units='ms')
    dut.clk.value = 1
    await Timer(5, units='ms')
    dut.clk.value = 0
    await Timer(5, units='ms')

def print_memory(dut):
    print("PRINT MEMORY")
    print(dut.dp.MEMORY_MODULE.mem.value)
    print("END PRINT MEMORY")

def print_inst_memory(dut):
    print("PRINT INST_MEMORY")
    print(dut.dp.INST_MEM.mem.value)
    print("END PRINT INST_MEMORY")

def print_signals(dut, clk=None):
    print("-----------------------------------------------------------------------------------")

    print(f"{clk if clk is not None else ''} | (REGISTER OUTPUT) PC: {dut.dp.pc_out.value}")
    print(f"{clk if clk is not None else ''} | (INST BUS DECODE) INST: {dut.inst_bus.value}")
    print(f"{clk if clk is not None else ''} | (INST BUS DECODE) Op: {dut.Op.value}")

    print("\n### CONTROL PIPE ###")
    print(f"{clk if clk is not None else ''} | PCSrcD: {dut.cont.PCSrcD.value}")
    print(f"{clk if clk is not None else ''} | PCSrcE: {dut.cont.PCSrcE.value}")
    print(f"{clk if clk is not None else ''} | PCSrcW: {dut.PCSrcW.value}")
    print(f"{clk if clk is not None else ''} | PCSrcM: {dut.cont.PCSrcM.value}")
    print(f"{clk if clk is not None else ''} | RegWriteD: {dut.cont.RegWriteD.value}")
    print(f"{clk if clk is not None else ''} | RegWriteE: {dut.cont.RegWriteE.value}")
    print(f"{clk if clk is not None else ''} | RegWriteM: {dut.cont.RegWriteM.value}")
    print(f"{clk if clk is not None else ''} | RegWriteW: {dut.RegWriteW.value}")
    print(f"{clk if clk is not None else ''} | MemtoRegD: {dut.cont.MemtoRegD.value}")
    print(f"{clk if clk is not None else ''} | MemtoRegE: {dut.cont.MemtoRegE.value}")
    print(f"{clk if clk is not None else ''} | MemtoRegM: {dut.cont.MemtoRegM.value}")
    print(f"{clk if clk is not None else ''} | MemtoRegW: {dut.MemtoRegW.value}")
    print(f"{clk if clk is not None else ''} | MemWriteD: {dut.cont.MemWriteD.value}")
    print(f"{clk if clk is not None else ''} | MemWriteE: {dut.cont.MemWriteE.value}")
    print(f"{clk if clk is not None else ''} | MemWriteM: {dut.MemWriteM.value}")
    print(f"{clk if clk is not None else ''} | ALUControlD: {dut.cont.ALUControlD.value}")
    print(f"{clk if clk is not None else ''} | ALUControlE: {dut.ALUControlE.value}")
    print(f"{clk if clk is not None else ''} | BranchD: {dut.cont.BranchD.value}")
    print(f"{clk if clk is not None else ''} | BranchE: {dut.cont.BranchE.value}")
    print(f"{clk if clk is not None else ''} | BranchTakenE: {dut.BranchTakenE.value}")
    print(f"{clk if clk is not None else ''} | ALUSrcD: {dut.cont.ALUSrcD.value}")
    print(f"{clk if clk is not None else ''} | ALUSrcE: {dut.ALUSrcE.value}")
    print(f"{clk if clk is not None else ''} | ImmSrcD: {dut.ImmSrcD.value}")
    print(f"{clk if clk is not None else ''} | RegSrcD: {dut.RegSrcD.value}")
    print(f"{clk if clk is not None else ''} | CondEx: {dut.cont.CondEx.value}")

    print("\n### FETCH ###")
    print(f"{clk if clk is not None else ''} | branch_taken_mux_out(pc_in): {dut.dp.branch_taken_mux_out.value}")
    print(f"{clk if clk is not None else ''} | pc_out: {dut.dp.pc_out.value}")
    print(f"{clk if clk is not None else ''} | pc_adder_out: {dut.dp.pc_adder_out.value}")
    print(f"{clk if clk is not None else ''} | inst_mem_out: {dut.dp.inst_mem_out.value}")
    print(f"{clk if clk is not None else ''} | pc_mux_out: {dut.dp.pc_mux_out.value}")
    print(f"{clk if clk is not None else ''} | result_wire: {dut.result_wire.value}")

    print("\n### DECODE ###")
    print(f"{clk if clk is not None else ''} | inst_bus: {dut.inst_bus.value}")
    print(f"{clk if clk is not None else ''} | a1_mux_out: {dut.dp.a1_mux_out.value}")
    print(f"{clk if clk is not None else ''} | a2_mux_out: {dut.dp.a2_mux_out.value}")
    print(f"{clk if clk is not None else ''} | extended_imm_out: {dut.dp.extended_imm_out.value}")
    print(f"{clk if clk is not None else ''} | rotated_extended_imm_out: {dut.dp.rotated_extended_imm_out.value}")
    print(f"{clk if clk is not None else ''} | extended_imm_out_execute: {dut.dp.extended_imm_out_execute.value}")
    print(f"{clk if clk is not None else ''} | rd1: {dut.rd1.value}")
    print(f"{clk if clk is not None else ''} | rd2: {dut.rd2.value}")
    print(f"{clk if clk is not None else ''} | rd1_execute: {dut.rd1_execute.value}")
    print(f"{clk if clk is not None else ''} | rd2_execute: {dut.rd2_execute.value}")
    # print(f"{clk if clk is not None else ''} | wa3d: {dut.dp.inst_bus.value[15:12]}")
    print(f"{clk if clk is not None else ''} | Op: {dut.Op.value}")
    print(f"{clk if clk is not None else ''} | Funct: {dut.Funct.value}")
    print(f"{clk if clk is not None else ''} | Rd: {dut.Rd.value}")
    print(f"{clk if clk is not None else ''} | Cond: {dut.Cond.value}")
    print(f"{clk if clk is not None else ''} | regfile write address: {dut.wa3w.value}")
    print(f"{clk if clk is not None else ''} | regfile write data: {dut.result_wire.value}")
    print(f"{clk if clk is not None else ''} | regfile write enable: {dut.RegWriteW.value}")

    print("\n### EXECUTE ###")
    print(f"{clk if clk is not None else ''} | forward_mux_a_out: {dut.dp.forward_mux_a_out.value}")
    print(f"{clk if clk is not None else ''} | forward_mux_b_out: {dut.dp.forward_mux_b_out.value}")
    print(f"{clk if clk is not None else ''} | alu_srcb_mux_out: {dut.dp.alu_srcb_mux_out.value}")
    print(f"{clk if clk is not None else ''} | alu_out: {dut.dp.alu_out.value}")
    print(f"{clk if clk is not None else ''} | wa3e: {dut.wa3e.value}")
    print(f"{clk if clk is not None else ''} | ALUFlags: {dut.ALUFlags.value}")
    print(f"{clk if clk is not None else ''} | alu_n: {dut.dp.alu_n.value}")
    print(f"{clk if clk is not None else ''} | alu_z: {dut.dp.alu_z.value}")
    print(f"{clk if clk is not None else ''} | alu_co: {dut.dp.alu_co.value}")
    print(f"{clk if clk is not None else ''} | alu_ovf: {dut.dp.alu_ovf.value}")
    print(f"{clk if clk is not None else ''} | shift_enable: {dut.shift_enable.value}")
    print(f"{clk if clk is not None else ''} | rotate_immediate_enable: {dut.rotate_immediate_enable.value}")

    print("\n### MEMORY ###")
    print(f"{clk if clk is not None else ''} | alu_out_memory(memory address): {dut.dp.alu_out_memory.value}")
    print(f"{clk if clk is not None else ''} | mem_out: {dut.dp.mem_out.value}")
    print(f"{clk if clk is not None else ''} | forward_mux_b_out_memory(memory write data): {dut.dp.forward_mux_b_out_memory.value}")
    print(f"{clk if clk is not None else ''} | wa3m: {dut.wa3m.value}")

    print("\n### WRITEBACK ###")
    print(f"{clk if clk is not None else ''} | wa3w: {dut.wa3w.value}")
    print(f"{clk if clk is not None else ''} | mem_out_writeback: {dut.dp.mem_out_writeback.value}")
    print(f"{clk if clk is not None else ''} | alu_out_writeback: {dut.dp.alu_out_writeback.value}")

    print("\n### HAZARD UNIT ###")
    print(f"{clk if clk is not None else ''} | StallF: {dut.StallF.value}")
    print(f"{clk if clk is not None else ''} | StallD: {dut.StallD.value}")
    print(f"{clk if clk is not None else ''} | FlushD: {dut.FlushD.value}")
    print(f"{clk if clk is not None else ''} | FlushE: {dut.FlushE.value}")
    print(f"{clk if clk is not None else ''} | ForwardAE: {dut.ForwardAE.value}")
    print(f"{clk if clk is not None else ''} | ForwardBE: {dut.ForwardBE.value}")
    print(f"{clk if clk is not None else ''} | Match_1E_M: {dut.hu.Match_1E_M.value}")
    print(f"{clk if clk is not None else ''} | Match_1E_W: {dut.hu.Match_1E_W.value}")
    print(f"{clk if clk is not None else ''} | Match_2E_M: {dut.hu.Match_2E_M.value}")
    print(f"{clk if clk is not None else ''} | Match_2E_W: {dut.hu.Match_2E_W.value}")
    print(f"{clk if clk is not None else ''} | Match_12D_E: {dut.hu.Match_12D_E.value}")
    print(f"{clk if clk is not None else ''} | LDRstall: {dut.hu.LDRstall.value}")
    print(f"{clk if clk is not None else ''} | BranchTakenE: {dut.hu.BranchTakenE.value}")
    print(f"{clk if clk is not None else ''} | PCWrPendingF: {dut.hu.PCWrPendingF.value}")

    print("\n### REGISTERS ###")
    print(f"{clk if clk is not None else ''} | register0: {dut.register0.value}")
    print(f"{clk if clk is not None else ''} | register1: {dut.register1.value}")
    print(f"{clk if clk is not None else ''} | register2: {dut.register2.value}")
    print(f"{clk if clk is not None else ''} | register3: {dut.register3.value}")
    print(f"{clk if clk is not None else ''} | register4: {dut.register4.value}")
    print(f"{clk if clk is not None else ''} | register5: {dut.register5.value}")
    print(f"{clk if clk is not None else ''} | register6: {dut.register6.value}")
    print(f"{clk if clk is not None else ''} | register7: {dut.register7.value}")
    print(f"{clk if clk is not None else ''} | register8: {dut.register8.value}")
    print(f"{clk if clk is not None else ''} | register9: {dut.register9.value}")
    print(f"{clk if clk is not None else ''} | register10: {dut.register10.value}")
    print(f"{clk if clk is not None else ''} | register11: {dut.register11.value}")
    print(f"{clk if clk is not None else ''} | register12: {dut.register12.value}")
    print(f"{clk if clk is not None else ''} | register13: {dut.register13.value}")
    print(f"{clk if clk is not None else ''} | register14: {dut.register14.value}")
    print(f"{clk if clk is not None else ''} | register15: {dut.register15.value}")

    print("\n### REGFILE ###")
    print(f"{clk if clk is not None else ''} | input 1: {dut.dp.REG_FILE.Source_select_0.value}")
    print(f"{clk if clk is not None else ''} | input 2: {dut.dp.REG_FILE.Source_select_1.value}")
    print(f"{clk if clk is not None else ''} | destination: {dut.dp.REG_FILE.Destination_select.value}")
    print(f"{clk if clk is not None else ''} | write data: {dut.dp.REG_FILE.DATA.value}")
    print(f"{clk if clk is not None else ''} | write enable: {dut.dp.REG_FILE.write_enable.value}")
    print(f"{clk if clk is not None else ''} | reset: {dut.dp.REG_FILE.reset.value}")
    print(f"{clk if clk is not None else ''} | Reg_15: {dut.dp.REG_FILE.Reg_15.value}")
    print(f"{clk if clk is not None else ''} | out_0: {dut.dp.REG_FILE.out_0.value}")
    print(f"{clk if clk is not None else ''} | out_1: {dut.dp.REG_FILE.out_1.value}")
    print(f"{clk if clk is not None else ''} | clk: {dut.dp.REG_FILE.clk.value}")

    print("-----------------------------------------------------------------------------------")

@cocotb.test()
async def test_hazard(dut):
    dut.reset.value = 0
    await Timer(1, units='ms')
    print_memory(dut)
    print_inst_memory(dut)
    print("\n")

    for i in range(15):
        print(f"CLOCK {i+1}")
        await clock_pulse(dut)
        print_signals(dut, i+1)
